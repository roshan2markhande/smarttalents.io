 Project Folder Structure (Node.js)
bash
Copy
Edit
/backend
 ├─ /config          # DB config, env variables
 ├─ /controllers     # API logic for each resource (companies, jobs, users, interviews)
 ├─ /models          # Mongoose schemas/models
 ├─ /routes          # Express route definitions
 ├─ /middleware      # Auth, error handling, file upload handling
 ├─ /services        # Business logic, external integrations (like AI question generator)
 ├─ /utils           # Helpers, validators
 ├─ /uploads         # (optional) local storage of files if no cloud storage used
 ├─ server.js        # app entry point
 └─ .env             # environment variables
3. Key Models & Their Relationships
3.1 Company
js
Copy
Edit
{
  _id: ObjectId,
  name: String,
  email: String,
  passwordHash: String,
  logoUrl: String,
  branding: {
    primaryColor: String,
    secondaryColor: String,
    fontFamily: String,
    // other UI customizations
  },
  createdAt: Date,
  updatedAt: Date
}
Each company has its own branding and admins.

Authentication is done for company admins.

3.2 User (Employee or Candidate)
js
Copy
Edit
{
  _id: ObjectId,
  companyId: ObjectId, // ref to Company
  name: String,
  email: String,
  role: String, // e.g., 'candidate', 'employee'
  passwordHash: String, // if applicable
  resumeUrl: String,
  appliedJobs: [ObjectId], // references to JobApplications
  createdAt: Date,
  updatedAt: Date
}
Candidates upload resumes, apply to jobs.

Employees/admins manage jobs and interviews.

3.3 Job Posting
js
Copy
Edit
{
  _id: ObjectId,
  companyId: ObjectId,
  title: String,
  description: String,
  location: String,
  position: String,
  department: String,
  createdAt: Date,
  updatedAt: Date,
  status: String, // e.g., 'open', 'closed'
  questions: {
    mcq: [{ questionText, options: [], correctAnswer }],
    coding: [{ questionText, language, testCases }]
  }
}
Questions can be set manually or generated by AI.

3.4 Interview / Test
js
Copy
Edit
{
  _id: ObjectId,
  jobId: ObjectId,
  candidateId: ObjectId,
  companyId: ObjectId,
  mcqAnswers: [{ questionId, selectedOption }],
  codingAnswers: [{ questionId, codeSubmission }],
  videoUrl: String, // recorded video of interview if applicable
  status: String, // e.g., 'pending', 'completed', 'reviewed'
  createdAt: Date,
  updatedAt: Date
}
3.5 Analytics & Logs
You can keep analytics simple or complex depending on your needs.

Example:

js
Copy
Edit
{
  _id: ObjectId,
  companyId: ObjectId,
  jobId: ObjectId,
  date: Date,
  views: Number,
  applications: Number,
  interviewsScheduled: Number,
  // other KPIs
}
4. API Design Overview
Route	Method	Description
/api/auth/login	POST	Login for company/user
/api/auth/register	POST	Register company or user
/api/company/customize	POST	Update branding & customization
/api/company/branding	GET	Get branding for dashboard UI
/api/jobs	GET	List jobs for company
/api/jobs	POST	Create new job posting
/api/jobs/:id	PUT	Update job
/api/jobs/:id	DELETE	Delete job
/api/jobs/:id/questions	POST	Add or generate questions
/api/interviews	GET	List interviews
/api/interviews/:id	GET	Get interview details
/api/interviews/:id/submit	POST	Candidate submits answers
/api/users	GET	List candidates/employees
/api/users/:id/resume	GET	Download candidate resume

5. Authentication & Authorization
Use JWT tokens.

Separate roles: company admin, employee, candidate.

Middleware to protect routes and restrict access based on roles.

6. File Uploads
Use Multer middleware to handle:

Company logos

Candidate resumes

Interview videos

Store either in cloud (AWS S3) or local /uploads directory.

7. Customization Storage and Application
Store company UI customizations inside branding field in Company collection.

On user login, fetch branding and send it in response.

Frontend applies branding dynamically (e.g., CSS variables).

8. Example Mongoose Model for Company (branding part)
js
Copy
Edit
const mongoose = require("mongoose");

const brandingSchema = new mongoose.Schema({
  primaryColor: { type: String, default: "#1e2a38" },
  secondaryColor: { type: String, default: "#2e3a49" },
  fontFamily: { type: String, default: "Arial, sans-serif" },
  logoUrl: { type: String },
});

const companySchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  passwordHash: { type: String, required: true },
  branding: brandingSchema,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model("Company", companySchema);
Summary
Aspect	Design Notes
Multi-tenancy	Each company isolated by companyId
Branding	Stored in company document
User roles	Candidate, employee, admin
Job and interviews	Linked by companyId and jobId
File uploads	Use Multer, store URLs in DB
APIs	RESTful with JWT auth

